# bitmarkd.conf  -*- mode: libucl -*-

# "." is a special case - it uses the path from the configuration file
# as the data directory.  Use ${CURDIR} for working directory.
# all certificates, logs and LevelDB files are relative to this directory
# unless the are overridden with absolute paths.
#data_directory = "."
#data_directory = "${CURDIR}"
data_directory = "/var/lib/bitmarkd"

# optional pid file if not absolute path then is created relative to
# the data directory
# pidfile = "bitmarkd.pid"

# select the chain of the network for peer connections
# cross chain networking connects will not work
#chain = bitmark
#chain = testing
chain = local

# select the default node configuration
# choose from: none, chain OR sub.domain.tld
nodes = chain

# optional reservoir file if not absolute path then is created relative to
# the data directory
reservoir_file = "reservoir.json"
# optional peer file if not absolute path then is created relative to
# the data directory
peer_file = "peers.json"

# macros to setup command-line or environment IPv4 setting
# VPC systems tend to only give a RFC1319 IPv4 and NAT the public IP to it
# they usually offer some way to retrieve the
# either set the environment value EC2_IPV4=...
# or add command-line option, either: --set=EC2_IPV4=...   or: --set=IPV4=...
.set(var=IPV4) "IPV4:EC2_IPV4:ENV_EC2_IPV4"
.set(var=RPC_IPV4) "IPV4"
.append(var=RPC_IPV4) ":2130"
.set(var=BROADCAST_IPV4) "IPV4"
.append(var=BROADCAST_IPV4) ":2135"
.set(var=LISTEN_IPV4) "IPV4"
.append(var=LISTEN_IPV4) ":2136"


# Bitmark Vault clients connect using JSON RPC to these listening ports
client_rpc {

  maximum_connections = 50

  listen = 0.0.0.0:2130
  listen = "[::]:2130"

  # announce certain public IP:ports to network
  # if using firewall port forwarding use the firewall external IP:port
  # announce = 127.0.0.1:2130
  # announce = "[::1]:2130"

  # this will only be used if variable expands to non-blank
  announce = ${RPC_IPV4}

  certificate = rpc.crt
  private_key = rpc.key
}


# peer-to-peer networking configuration
peering {

  # set to off to prevent additional connections
  dynamic_connections = true

  # for subscribers to receive various announcements
  broadcast = 0.0.0.0:2135
  broadcast = "[::]:2135"

  # for incoming rpc connections
  listen = 0.0.0.0:2136
  listen = "[::]:2136"

  # announce certain public IP:ports to network
  # if using firewall port forwarding use the firewall external IP:port
  announce {
    #broadcast = 127.0.0.1:2135
    #broadcast= "[::1]:2135"
    #listen = 127.0.0.1:2136
    #listen = "[::1]:2136"

    # these will only be used if variables expand to non-blank
    broadcast = "${BROADCAST_IPV4}"
    listen = "${LISTEN_IPV4}"
  }

  public_key = peer.public
  private_key = peer.private

  # dedicated connections
  subscribe = {public_key = "781d78a9eb338a511ae88a9be5383095ede46445596506e29ad8f022a3f8596e", address = "127.0.0.1:3135"}
  #subscribe = {public_key = "781d78a9eb338a511ae88a9be5383095ede46445596506e29ad8f022a3f8596e", address = "[::1]:3135"}
  connect = {public_key = "781d78a9eb338a511ae88a9be5383095ede46445596506e29ad8f022a3f8596e", address = "127.0.0.1:3136"}
  #connect = {public_key = "781d78a9eb338a511ae88a9be5383095ede46445596506e29ad8f022a3f8596e", address = "[::1]:3136"}

}


# configuration of recorderd connections
proofing {

  public_key = proof.public
  private_key = proof.private
  signing_key = proof.sign

  # payments for future transfers
  # private keys are just samples for testing
  # (do not include such keys in a real configuration file)
  payment_address {
    # bitcoin key: "cPcHEqnqNG3Ze27Yqqxk8fQXmFVAgme1h1UT3HBN3MV4gERUVbVc"
    bitcoin = "msxN7C7cRNgbgyUzt3EcvrpmWXc59sZVN4"
    # litecoin key: "cUhoPFEKgWzxX9Ycynemjtvh4kEv3vcoVW6RgLaxzEVTGHFWF6WY"
    litecoin = "mjPkDNakVA4w4hJZ6WF7p8yKUV2merhyCM"
  }

  publish =  "0.0.0.0:2140"
  publish = "[::]:2140"
  submit =  "0.0.0.0:2141"
  submit = "[::]:2141"

}

# setup for every payment service
payment {

  # set to true to get payment transactions directly from the discovery proxy
  use_discovery = true

  discovery {
    sub_endpoint = 127.0.0.1:5566
    req_endpoint = 127.0.0.1:5567
  }

  # local bitcoin access to REST API
  bitcoin {
    url = http://127.0.0.1:18333/rest
  }

  # local litecoin access to REST API
  litecoin {
    url = http://127.0.0.1:9332/rest
  }

}

# logging configuration
logging {
  size = 1048576
  count = 100

  # set the logging level for various modules
  # modules not overridden with get the value from DEFAULT
  # the default value for DEFAULT is "critical"
  levels {
    DEFAULT = info
    # DEFAULT = debug

    announcer = info
    announce = info
    asset = info
    asset-expiry = info
    blockstore = info
    block = info
    ring = info
    main = info
    rpc-server = info
    mode = info
    payment = info
    bitcoin = info
    bitcoin-subscriber = info
    litecoin = info
    listener = info
    peer = info
    subscriber = info
    connector = info
    broadcaster = info
    proof = info
    submission = info
    publisher = info
    reservoir = info
    reservoir-verifier = info
    rebroadcaster = info
  }
}
