// Copyright (c) 2014-2015 Bitmark Inc.
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

// stratum mining JSON: http://mining.bitcoin.cz/stratum-mining/
//
// subscribe:
//   {"id": 1, "method": "mining.subscribe", "params": []}    -> subscribe to notifications
//   {"id": 1, "result": [
//      [["mining.set_difficulty",
//        "b4b6693b72a50c7116db18d6497cac52"],   -> subscription id to cancel this type of notification
//       ["mining.notify",
//        "ae6812eb4cd7735a302a8a9dd95cf71f"]],  -> subscription id to cancel this type of notification
//      "08000002",   -> Extranonce1             -> Hex-encoded, per-connection unique string which will be used for coinbase serialization later
//      4],           -> Extranonce2_size        -> Represents expected length of extranonce2 which will be generated by the miner
//    "error": null}
//
// authenticate: (for each miner thread)
//   {"id": 2, "method": "mining.authorize", "params": ["slush.miner1", "password"]}  -> miner authenticate
//   {"id": 2, "error": null, "result": true}
//
// notification:  new block to mine
//   {"id": null, "method": "mining.notify", "params": [
//      "bf",         -> job_id
//      "4d16b6f85af6e2198f44ae2a6de67f78487ae5611b77c6c0440b921e00000000",
//      "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff20020862062f503253482f04b8864e5008",
//      "072f736c7573682f000000000100f2052a010000001976a914d23fcdf86f7e756a64a7a9688ef9903327048ed988ac00000000",
//      [],           -> merkle_branch
//      "00000002",   -> version
//      "1c2ac4af",   -> nbits
//      "504e86b9",   -> ntime
//      false]}       -> clean_jobs
//
//    job_id        - ID of the job. Use this ID while submitting share generated from this job.
//    prevhash      - Hash of previous block.
//    coinbase1     - Initial part of coinbase transaction.
//    coinbase2     - Final part of coinbase transaction.
//    merkle_branch - List of hashes, will be used for calculation of merkle root.
//                    This is not a list of all transactions, it only contains prepared hashes of steps of merkle tree algorithm.
//    version       - Bitcoin block version.
//    nbits         - Encoded current network difficulty
//    ntime         - Current ntime
//    clean_jobs    - When true, server indicates that submitting shares from previous jobs don't have a sense and such shares will be rejected.
//                    When this flag is set, miner should also drop all previous jobs, so job_ids can be eventually rotated.
//
// notfication: change difficulty
//   {"id": null, "method": "mining.set_difficulty", "params": [2]}
//   -> This means that difficulty 2 will be applied to every next job received from the server.
//
// submit share:
//   {"id": 4, "method": "mining.submit", "params": [
//      "slush.miner1",      -> previously authorised worker name
//      "bf",                -> job_id from a previous notification
//      "00000001",          -> extranonce2 (size must match)
//      "504e86ed",          -> ntime (32 bit)
//      "b2957c02"]}         -> nonce (32 bit)
//   {"error": null, "id": 4, "result": true}
//
// error codes:
//    20 - Other/Unknown
//    21 - Job not found (=stale)
//    22 - Duplicate share
//    23 - Low difficulty share
//    24 - Unauthorized worker
//    25 - Not subscribed
package mine
